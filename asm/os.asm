; 
; techOS: Operating System for the iit3503
; 
; Kyle C. Hale (c) 2021
;

	.ORIG x0000

    ; we start by laying out the TRAP vector table
    ; which contains handlers for user-invoked
    ; trap routines.

	.FILL TRAP_NULL_HANDLER	; x00
	.FILL TRAP_NULL_HANDLER	; x01
	.FILL TRAP_NULL_HANDLER	; x02
	.FILL TRAP_NULL_HANDLER	; x03
	.FILL TRAP_NULL_HANDLER	; x04
	.FILL TRAP_NULL_HANDLER	; x05
	.FILL TRAP_NULL_HANDLER	; x06
	.FILL TRAP_NULL_HANDLER	; x07
	.FILL TRAP_NULL_HANDLER	; x08
	.FILL TRAP_NULL_HANDLER	; x09
	.FILL TRAP_NULL_HANDLER	; x0A
	.FILL TRAP_NULL_HANDLER	; x0B
	.FILL TRAP_NULL_HANDLER	; x0C
	.FILL TRAP_NULL_HANDLER	; x0D
	.FILL TRAP_NULL_HANDLER	; x0E
	.FILL TRAP_NULL_HANDLER	; x0F
	.FILL TRAP_NULL_HANDLER	; x10
	.FILL TRAP_NULL_HANDLER	; x11
	.FILL TRAP_NULL_HANDLER	; x12
	.FILL TRAP_NULL_HANDLER	; x13
	.FILL TRAP_NULL_HANDLER	; x14
	.FILL TRAP_NULL_HANDLER	; x15
	.FILL TRAP_NULL_HANDLER	; x16
	.FILL TRAP_NULL_HANDLER	; x17
	.FILL TRAP_NULL_HANDLER	; x18
	.FILL TRAP_NULL_HANDLER	; x19
	.FILL TRAP_NULL_HANDLER	; x1A
	.FILL TRAP_NULL_HANDLER	; x1B
	.FILL TRAP_NULL_HANDLER	; x1C
	.FILL TRAP_NULL_HANDLER	; x1D
	.FILL TRAP_NULL_HANDLER	; x1E
	.FILL TRAP_NULL_HANDLER	; x1F
	.FILL TRAP_GETC_HANDLER	; x20
	.FILL TRAP_OUT_HANDLER	; x21
	.FILL TRAP_PUTS_HANDLER	; x22
	.FILL TRAP_IN_HANDLER	; x23
	.FILL TRAP_PUTSP_HANDLER ; x24
	.FILL TRAP_HALT_HANDLER	; x25
	.FILL TRAP_NULL_HANDLER	; x26
	.FILL TRAP_NULL_HANDLER	; x27
	.FILL TRAP_NULL_HANDLER	; x28
	.FILL TRAP_NULL_HANDLER	; x29
	.FILL TRAP_NULL_HANDLER	; x2A
	.FILL TRAP_NULL_HANDLER	; x2B
	.FILL TRAP_NULL_HANDLER	; x2C
	.FILL TRAP_NULL_HANDLER	; x2D
	.FILL TRAP_NULL_HANDLER	; x2E
	.FILL TRAP_NULL_HANDLER	; x2F
	.FILL TRAP_NULL_HANDLER	; x30
	.FILL TRAP_NULL_HANDLER	; x31
	.FILL TRAP_NULL_HANDLER	; x32
	.FILL TRAP_NULL_HANDLER	; x33
	.FILL TRAP_NULL_HANDLER	; x34
	.FILL TRAP_NULL_HANDLER	; x35
	.FILL TRAP_NULL_HANDLER	; x36
	.FILL TRAP_NULL_HANDLER	; x37
	.FILL TRAP_NULL_HANDLER	; x38
	.FILL TRAP_NULL_HANDLER	; x39
	.FILL TRAP_NULL_HANDLER	; x3A
	.FILL TRAP_NULL_HANDLER	; x3B
	.FILL TRAP_NULL_HANDLER	; x3C
	.FILL TRAP_NULL_HANDLER	; x3D
	.FILL TRAP_NULL_HANDLER	; x3E
	.FILL TRAP_NULL_HANDLER	; x3F
	.FILL TRAP_NULL_HANDLER	; x40
	.FILL TRAP_NULL_HANDLER	; x41
	.FILL TRAP_NULL_HANDLER	; x42
	.FILL TRAP_NULL_HANDLER	; x43
	.FILL TRAP_NULL_HANDLER	; x44
	.FILL TRAP_NULL_HANDLER	; x45
	.FILL TRAP_NULL_HANDLER	; x46
	.FILL TRAP_NULL_HANDLER	; x47
	.FILL TRAP_NULL_HANDLER	; x48
	.FILL TRAP_NULL_HANDLER	; x49
	.FILL TRAP_NULL_HANDLER	; x4A
	.FILL TRAP_NULL_HANDLER	; x4B
	.FILL TRAP_NULL_HANDLER	; x4C
	.FILL TRAP_NULL_HANDLER	; x4D
	.FILL TRAP_NULL_HANDLER	; x4E
	.FILL TRAP_NULL_HANDLER	; x4F
	.FILL TRAP_NULL_HANDLER	; x50
	.FILL TRAP_NULL_HANDLER	; x51
	.FILL TRAP_NULL_HANDLER	; x52
	.FILL TRAP_NULL_HANDLER	; x53
	.FILL TRAP_NULL_HANDLER	; x54
	.FILL TRAP_NULL_HANDLER	; x55
	.FILL TRAP_NULL_HANDLER	; x56
	.FILL TRAP_NULL_HANDLER	; x57
	.FILL TRAP_NULL_HANDLER	; x58
	.FILL TRAP_NULL_HANDLER	; x59
	.FILL TRAP_NULL_HANDLER	; x5A
	.FILL TRAP_NULL_HANDLER	; x5B
	.FILL TRAP_NULL_HANDLER	; x5C
	.FILL TRAP_NULL_HANDLER	; x5D
	.FILL TRAP_NULL_HANDLER	; x5E
	.FILL TRAP_NULL_HANDLER	; x5F
	.FILL TRAP_NULL_HANDLER	; x60
	.FILL TRAP_NULL_HANDLER	; x61
	.FILL TRAP_NULL_HANDLER	; x62
	.FILL TRAP_NULL_HANDLER	; x63
	.FILL TRAP_NULL_HANDLER	; x64
	.FILL TRAP_NULL_HANDLER	; x65
	.FILL TRAP_NULL_HANDLER	; x66
	.FILL TRAP_NULL_HANDLER	; x67
	.FILL TRAP_NULL_HANDLER	; x68
	.FILL TRAP_NULL_HANDLER	; x69
	.FILL TRAP_NULL_HANDLER	; x6A
	.FILL TRAP_NULL_HANDLER	; x6B
	.FILL TRAP_NULL_HANDLER	; x6C
	.FILL TRAP_NULL_HANDLER	; x6D
	.FILL TRAP_NULL_HANDLER	; x6E
	.FILL TRAP_NULL_HANDLER	; x6F
	.FILL TRAP_NULL_HANDLER	; x70
	.FILL TRAP_NULL_HANDLER	; x71
	.FILL TRAP_NULL_HANDLER	; x72
	.FILL TRAP_NULL_HANDLER	; x73
	.FILL TRAP_NULL_HANDLER	; x74
	.FILL TRAP_NULL_HANDLER	; x75
	.FILL TRAP_NULL_HANDLER	; x76
	.FILL TRAP_NULL_HANDLER	; x77
	.FILL TRAP_NULL_HANDLER	; x78
	.FILL TRAP_NULL_HANDLER	; x79
	.FILL TRAP_NULL_HANDLER	; x7A
	.FILL TRAP_NULL_HANDLER	; x7B
	.FILL TRAP_NULL_HANDLER	; x7C
	.FILL TRAP_NULL_HANDLER	; x7D
	.FILL TRAP_NULL_HANDLER	; x7E
	.FILL TRAP_NULL_HANDLER	; x7F
	.FILL TRAP_NULL_HANDLER	; x80
	.FILL TRAP_NULL_HANDLER	; x81
	.FILL TRAP_NULL_HANDLER	; x82
	.FILL TRAP_NULL_HANDLER	; x83
	.FILL TRAP_NULL_HANDLER	; x84
	.FILL TRAP_NULL_HANDLER	; x85
	.FILL TRAP_NULL_HANDLER	; x86
	.FILL TRAP_NULL_HANDLER	; x87
	.FILL TRAP_NULL_HANDLER	; x88
	.FILL TRAP_NULL_HANDLER	; x89
	.FILL TRAP_NULL_HANDLER	; x8A
	.FILL TRAP_NULL_HANDLER	; x8B
	.FILL TRAP_NULL_HANDLER	; x8C
	.FILL TRAP_NULL_HANDLER	; x8D
	.FILL TRAP_NULL_HANDLER	; x8E
	.FILL TRAP_NULL_HANDLER	; x8F
	.FILL TRAP_NULL_HANDLER	; x90
	.FILL TRAP_NULL_HANDLER	; x91
	.FILL TRAP_NULL_HANDLER	; x92
	.FILL TRAP_NULL_HANDLER	; x93
	.FILL TRAP_NULL_HANDLER	; x94
	.FILL TRAP_NULL_HANDLER	; x95
	.FILL TRAP_NULL_HANDLER	; x96
	.FILL TRAP_NULL_HANDLER	; x97
	.FILL TRAP_NULL_HANDLER	; x98
	.FILL TRAP_NULL_HANDLER	; x99
	.FILL TRAP_NULL_HANDLER	; x9A
	.FILL TRAP_NULL_HANDLER	; x9B
	.FILL TRAP_NULL_HANDLER	; x9C
	.FILL TRAP_NULL_HANDLER	; x9D
	.FILL TRAP_NULL_HANDLER	; x9E
	.FILL TRAP_NULL_HANDLER	; x9F
	.FILL TRAP_NULL_HANDLER	; xA0
	.FILL TRAP_NULL_HANDLER	; xA1
	.FILL TRAP_NULL_HANDLER	; xA2
	.FILL TRAP_NULL_HANDLER	; xA3
	.FILL TRAP_NULL_HANDLER	; xA4
	.FILL TRAP_NULL_HANDLER	; xA5
	.FILL TRAP_NULL_HANDLER	; xA6
	.FILL TRAP_NULL_HANDLER	; xA7
	.FILL TRAP_NULL_HANDLER	; xA8
	.FILL TRAP_NULL_HANDLER	; xA9
	.FILL TRAP_NULL_HANDLER	; xAA
	.FILL TRAP_NULL_HANDLER	; xAB
	.FILL TRAP_NULL_HANDLER	; xAC
	.FILL TRAP_NULL_HANDLER	; xAD
	.FILL TRAP_NULL_HANDLER	; xAE
	.FILL TRAP_NULL_HANDLER	; xAF
	.FILL TRAP_NULL_HANDLER	; xB0
	.FILL TRAP_NULL_HANDLER	; xB1
	.FILL TRAP_NULL_HANDLER	; xB2
	.FILL TRAP_NULL_HANDLER	; xB3
	.FILL TRAP_NULL_HANDLER	; xB4
	.FILL TRAP_NULL_HANDLER	; xB5
	.FILL TRAP_NULL_HANDLER	; xB6
	.FILL TRAP_NULL_HANDLER	; xB7
	.FILL TRAP_NULL_HANDLER	; xB8
	.FILL TRAP_NULL_HANDLER	; xB9
	.FILL TRAP_NULL_HANDLER	; xBA
	.FILL TRAP_NULL_HANDLER	; xBB
	.FILL TRAP_NULL_HANDLER	; xBC
	.FILL TRAP_NULL_HANDLER	; xBD
	.FILL TRAP_NULL_HANDLER	; xBE
	.FILL TRAP_NULL_HANDLER	; xBF
	.FILL TRAP_NULL_HANDLER	; xC0
	.FILL TRAP_NULL_HANDLER	; xC1
	.FILL TRAP_NULL_HANDLER	; xC2
	.FILL TRAP_NULL_HANDLER	; xC3
	.FILL TRAP_NULL_HANDLER	; xC4
	.FILL TRAP_NULL_HANDLER	; xC5
	.FILL TRAP_NULL_HANDLER	; xC6
	.FILL TRAP_NULL_HANDLER	; xC7
	.FILL TRAP_NULL_HANDLER	; xC8
	.FILL TRAP_NULL_HANDLER	; xC9
	.FILL TRAP_NULL_HANDLER	; xCA
	.FILL TRAP_NULL_HANDLER	; xCB
	.FILL TRAP_NULL_HANDLER	; xCC
	.FILL TRAP_NULL_HANDLER	; xCD
	.FILL TRAP_NULL_HANDLER	; xCE
	.FILL TRAP_NULL_HANDLER	; xCF
	.FILL TRAP_NULL_HANDLER	; xD0
	.FILL TRAP_NULL_HANDLER	; xD1
	.FILL TRAP_NULL_HANDLER	; xD2
	.FILL TRAP_NULL_HANDLER	; xD3
	.FILL TRAP_NULL_HANDLER	; xD4
	.FILL TRAP_NULL_HANDLER	; xD5
	.FILL TRAP_NULL_HANDLER	; xD6
	.FILL TRAP_NULL_HANDLER	; xD7
	.FILL TRAP_NULL_HANDLER	; xD8
	.FILL TRAP_NULL_HANDLER	; xD9
	.FILL TRAP_NULL_HANDLER	; xDA
	.FILL TRAP_NULL_HANDLER	; xDB
	.FILL TRAP_NULL_HANDLER	; xDC
	.FILL TRAP_NULL_HANDLER	; xDD
	.FILL TRAP_NULL_HANDLER	; xDE
	.FILL TRAP_NULL_HANDLER	; xDF
	.FILL TRAP_NULL_HANDLER	; xE0
	.FILL TRAP_NULL_HANDLER	; xE1
	.FILL TRAP_NULL_HANDLER	; xE2
	.FILL TRAP_NULL_HANDLER	; xE3
	.FILL TRAP_NULL_HANDLER	; xE4
	.FILL TRAP_NULL_HANDLER	; xE5
	.FILL TRAP_NULL_HANDLER	; xE6
	.FILL TRAP_NULL_HANDLER	; xE7
	.FILL TRAP_NULL_HANDLER	; xE8
	.FILL TRAP_NULL_HANDLER	; xE9
	.FILL TRAP_NULL_HANDLER	; xEA
	.FILL TRAP_NULL_HANDLER	; xEB
	.FILL TRAP_NULL_HANDLER	; xEC
	.FILL TRAP_NULL_HANDLER	; xED
	.FILL TRAP_NULL_HANDLER	; xEE
	.FILL TRAP_NULL_HANDLER	; xEF
	.FILL TRAP_NULL_HANDLER	; xF0
	.FILL TRAP_NULL_HANDLER	; xF1
	.FILL TRAP_NULL_HANDLER	; xF2
	.FILL TRAP_NULL_HANDLER	; xF3
	.FILL TRAP_NULL_HANDLER	; xF4
	.FILL TRAP_NULL_HANDLER	; xF5
	.FILL TRAP_NULL_HANDLER	; xF6
	.FILL TRAP_NULL_HANDLER	; xF7
	.FILL TRAP_NULL_HANDLER	; xF8
	.FILL TRAP_NULL_HANDLER	; xF9
	.FILL TRAP_NULL_HANDLER	; xFA
	.FILL TRAP_NULL_HANDLER	; xFB
	.FILL TRAP_NULL_HANDLER	; xFC
	.FILL TRAP_NULL_HANDLER	; xFD
	.FILL TRAP_NULL_HANDLER	; xFE
	.FILL TRAP_NULL_HANDLER	; xFF

    ; 
    ; then we lay out the interrupt vector table (at x100 to x1ff)
    ; the first 128 entries are occupied by pointers to 
    ; excpetion service routines. (x100 -> x17f)
    ; 
    ; The other half is occupied by interrupt service routines
    ; (x180 -> x1ff)
    ;
	.FILL EXCP_PRIV_HANDLER	; x00
	.FILL EXCP_ILL_HANDLER	; x01
	.FILL EXCP_ACV_HANDLER	; x02
	.FILL EXCP_NULL_HANDLER	; x03
	.FILL EXCP_NULL_HANDLER	; x04
	.FILL EXCP_NULL_HANDLER	; x05
	.FILL EXCP_NULL_HANDLER	; x06
	.FILL EXCP_NULL_HANDLER	; x07
	.FILL EXCP_NULL_HANDLER	; x08
	.FILL EXCP_NULL_HANDLER	; x09
	.FILL EXCP_NULL_HANDLER	; x0A
	.FILL EXCP_NULL_HANDLER	; x0B
	.FILL EXCP_NULL_HANDLER	; x0C
	.FILL EXCP_NULL_HANDLER	; x0D
	.FILL EXCP_NULL_HANDLER	; x0E
	.FILL EXCP_NULL_HANDLER	; x0F
	.FILL EXCP_NULL_HANDLER	; x10
	.FILL EXCP_NULL_HANDLER	; x11
	.FILL EXCP_NULL_HANDLER	; x12
	.FILL EXCP_NULL_HANDLER	; x13
	.FILL EXCP_NULL_HANDLER	; x14
	.FILL EXCP_NULL_HANDLER	; x15
	.FILL EXCP_NULL_HANDLER	; x16
	.FILL EXCP_NULL_HANDLER	; x17
	.FILL EXCP_NULL_HANDLER	; x18
	.FILL EXCP_NULL_HANDLER	; x19
	.FILL EXCP_NULL_HANDLER	; x1A
	.FILL EXCP_NULL_HANDLER	; x1B
	.FILL EXCP_NULL_HANDLER	; x1C
	.FILL EXCP_NULL_HANDLER	; x1D
	.FILL EXCP_NULL_HANDLER	; x1E
	.FILL EXCP_NULL_HANDLER	; x1F
	.FILL EXCP_NULL_HANDLER	; x20
	.FILL EXCP_NULL_HANDLER	; x21
	.FILL EXCP_NULL_HANDLER	; x22
	.FILL EXCP_NULL_HANDLER	; x23
	.FILL EXCP_NULL_HANDLER   ; x24
	.FILL EXCP_NULL_HANDLER	; x25
	.FILL EXCP_NULL_HANDLER	; x26
	.FILL EXCP_NULL_HANDLER	; x27
	.FILL EXCP_NULL_HANDLER	; x28
	.FILL EXCP_NULL_HANDLER	; x29
	.FILL EXCP_NULL_HANDLER	; x2A
	.FILL EXCP_NULL_HANDLER	; x2B
	.FILL EXCP_NULL_HANDLER	; x2C
	.FILL EXCP_NULL_HANDLER	; x2D
	.FILL EXCP_NULL_HANDLER	; x2E
	.FILL EXCP_NULL_HANDLER	; x2F
	.FILL EXCP_NULL_HANDLER	; x30
	.FILL EXCP_NULL_HANDLER	; x31
	.FILL EXCP_NULL_HANDLER	; x32
	.FILL EXCP_NULL_HANDLER	; x33
	.FILL EXCP_NULL_HANDLER	; x34
	.FILL EXCP_NULL_HANDLER	; x35
	.FILL EXCP_NULL_HANDLER	; x36
	.FILL EXCP_NULL_HANDLER	; x37
	.FILL EXCP_NULL_HANDLER	; x38
	.FILL EXCP_NULL_HANDLER	; x39
	.FILL EXCP_NULL_HANDLER	; x3A
	.FILL EXCP_NULL_HANDLER	; x3B
	.FILL EXCP_NULL_HANDLER	; x3C
	.FILL EXCP_NULL_HANDLER	; x3D
	.FILL EXCP_NULL_HANDLER	; x3E
	.FILL EXCP_NULL_HANDLER	; x3F
	.FILL EXCP_NULL_HANDLER	; x40
	.FILL EXCP_NULL_HANDLER	; x41
	.FILL EXCP_NULL_HANDLER	; x42
	.FILL EXCP_NULL_HANDLER	; x43
	.FILL EXCP_NULL_HANDLER	; x44
	.FILL EXCP_NULL_HANDLER	; x45
	.FILL EXCP_NULL_HANDLER	; x46
	.FILL EXCP_NULL_HANDLER	; x47
	.FILL EXCP_NULL_HANDLER	; x48
	.FILL EXCP_NULL_HANDLER	; x49
	.FILL EXCP_NULL_HANDLER	; x4A
	.FILL EXCP_NULL_HANDLER	; x4B
	.FILL EXCP_NULL_HANDLER	; x4C
	.FILL EXCP_NULL_HANDLER	; x4D
	.FILL EXCP_NULL_HANDLER	; x4E
	.FILL EXCP_NULL_HANDLER	; x4F
	.FILL EXCP_NULL_HANDLER	; x50
	.FILL EXCP_NULL_HANDLER	; x51
	.FILL EXCP_NULL_HANDLER	; x52
	.FILL EXCP_NULL_HANDLER	; x53
	.FILL EXCP_NULL_HANDLER	; x54
	.FILL EXCP_NULL_HANDLER	; x55
	.FILL EXCP_NULL_HANDLER	; x56
	.FILL EXCP_NULL_HANDLER	; x57
	.FILL EXCP_NULL_HANDLER	; x58
	.FILL EXCP_NULL_HANDLER	; x59
	.FILL EXCP_NULL_HANDLER	; x5A
	.FILL EXCP_NULL_HANDLER	; x5B
	.FILL EXCP_NULL_HANDLER	; x5C
	.FILL EXCP_NULL_HANDLER	; x5D
	.FILL EXCP_NULL_HANDLER	; x5E
	.FILL EXCP_NULL_HANDLER	; x5F
	.FILL EXCP_NULL_HANDLER	; x60
	.FILL EXCP_NULL_HANDLER	; x61
	.FILL EXCP_NULL_HANDLER	; x62
	.FILL EXCP_NULL_HANDLER	; x63
	.FILL EXCP_NULL_HANDLER	; x64
	.FILL EXCP_NULL_HANDLER	; x65
	.FILL EXCP_NULL_HANDLER	; x66
	.FILL EXCP_NULL_HANDLER	; x67
	.FILL EXCP_NULL_HANDLER	; x68
	.FILL EXCP_NULL_HANDLER	; x69
	.FILL EXCP_NULL_HANDLER	; x6A
	.FILL EXCP_NULL_HANDLER	; x6B
	.FILL EXCP_NULL_HANDLER	; x6C
	.FILL EXCP_NULL_HANDLER	; x6D
	.FILL EXCP_NULL_HANDLER	; x6E
	.FILL EXCP_NULL_HANDLER	; x6F
	.FILL EXCP_NULL_HANDLER	; x70
	.FILL EXCP_NULL_HANDLER	; x71
	.FILL EXCP_NULL_HANDLER	; x72
	.FILL EXCP_NULL_HANDLER	; x73
	.FILL EXCP_NULL_HANDLER	; x74
	.FILL EXCP_NULL_HANDLER	; x75
	.FILL EXCP_NULL_HANDLER	; x76
	.FILL EXCP_NULL_HANDLER	; x77
	.FILL EXCP_NULL_HANDLER	; x78
	.FILL EXCP_NULL_HANDLER	; x79
	.FILL EXCP_NULL_HANDLER	; x7A
	.FILL EXCP_NULL_HANDLER	; x7B
	.FILL EXCP_NULL_HANDLER	; x7C
	.FILL EXCP_NULL_HANDLER	; x7D
	.FILL EXCP_NULL_HANDLER	; x7E
	.FILL EXCP_NULL_HANDLER	; x7F

    ; 
    ; Begin Interrupt Service Routines
    ;
	.FILL INT_KBD_HANDLER 	; x80
	.FILL INT_NULL_HANDLER	; x81
	.FILL INT_NULL_HANDLER	; x82
	.FILL INT_NULL_HANDLER	; x83
	.FILL INT_NULL_HANDLER	; x84
	.FILL INT_NULL_HANDLER	; x85
	.FILL INT_NULL_HANDLER	; x86
	.FILL INT_NULL_HANDLER	; x87
	.FILL INT_NULL_HANDLER	; x88
	.FILL INT_NULL_HANDLER	; x89
	.FILL INT_NULL_HANDLER	; x8A
	.FILL INT_NULL_HANDLER	; x8B
	.FILL INT_NULL_HANDLER	; x8C
	.FILL INT_NULL_HANDLER	; x8D
	.FILL INT_NULL_HANDLER	; x8E
	.FILL INT_NULL_HANDLER	; x8F
	.FILL INT_NULL_HANDLER	; x90
	.FILL INT_NULL_HANDLER	; x91
	.FILL INT_NULL_HANDLER	; x92
	.FILL INT_NULL_HANDLER	; x93
	.FILL INT_NULL_HANDLER	; x94
	.FILL INT_NULL_HANDLER	; x95
	.FILL INT_NULL_HANDLER	; x96
	.FILL INT_NULL_HANDLER	; x97
	.FILL INT_NULL_HANDLER	; x98
	.FILL INT_NULL_HANDLER	; x99
	.FILL INT_NULL_HANDLER	; x9A
	.FILL INT_NULL_HANDLER	; x9B
	.FILL INT_NULL_HANDLER	; x9C
	.FILL INT_NULL_HANDLER	; x9D
	.FILL INT_NULL_HANDLER	; x9E
	.FILL INT_NULL_HANDLER	; x9F
	.FILL INT_NULL_HANDLER	; xA0
	.FILL INT_NULL_HANDLER	; xA1
	.FILL INT_NULL_HANDLER	; xA2
	.FILL INT_NULL_HANDLER	; xA3
	.FILL INT_NULL_HANDLER	; xA4
	.FILL INT_NULL_HANDLER	; xA5
	.FILL INT_NULL_HANDLER	; xA6
	.FILL INT_NULL_HANDLER	; xA7
	.FILL INT_NULL_HANDLER	; xA8
	.FILL INT_NULL_HANDLER	; xA9
	.FILL INT_NULL_HANDLER	; xAA
	.FILL INT_NULL_HANDLER	; xAB
	.FILL INT_NULL_HANDLER	; xAC
	.FILL INT_NULL_HANDLER	; xAD
	.FILL INT_NULL_HANDLER	; xAE
	.FILL INT_NULL_HANDLER	; xAF
	.FILL INT_NULL_HANDLER	; xB0
	.FILL INT_NULL_HANDLER	; xB1
	.FILL INT_NULL_HANDLER	; xB2
	.FILL INT_NULL_HANDLER	; xB3
	.FILL INT_NULL_HANDLER	; xB4
	.FILL INT_NULL_HANDLER	; xB5
	.FILL INT_NULL_HANDLER	; xB6
	.FILL INT_NULL_HANDLER	; xB7
	.FILL INT_NULL_HANDLER	; xB8
	.FILL INT_NULL_HANDLER	; xB9
	.FILL INT_NULL_HANDLER	; xBA
	.FILL INT_NULL_HANDLER	; xBB
	.FILL INT_NULL_HANDLER	; xBC
	.FILL INT_NULL_HANDLER	; xBD
	.FILL INT_NULL_HANDLER	; xBE
	.FILL INT_NULL_HANDLER	; xBF
	.FILL INT_NULL_HANDLER	; xC0
	.FILL INT_NULL_HANDLER	; xC1
	.FILL INT_NULL_HANDLER	; xC2
	.FILL INT_NULL_HANDLER	; xC3
	.FILL INT_NULL_HANDLER	; xC4
	.FILL INT_NULL_HANDLER	; xC5
	.FILL INT_NULL_HANDLER	; xC6
	.FILL INT_NULL_HANDLER	; xC7
	.FILL INT_NULL_HANDLER	; xC8
	.FILL INT_NULL_HANDLER	; xC9
	.FILL INT_NULL_HANDLER	; xCA
	.FILL INT_NULL_HANDLER	; xCB
	.FILL INT_NULL_HANDLER	; xCC
	.FILL INT_NULL_HANDLER	; xCD
	.FILL INT_NULL_HANDLER	; xCE
	.FILL INT_NULL_HANDLER	; xCF
	.FILL INT_NULL_HANDLER	; xD0
	.FILL INT_NULL_HANDLER	; xD1
	.FILL INT_NULL_HANDLER	; xD2
	.FILL INT_NULL_HANDLER	; xD3
	.FILL INT_NULL_HANDLER	; xD4
	.FILL INT_NULL_HANDLER	; xD5
	.FILL INT_NULL_HANDLER	; xD6
	.FILL INT_NULL_HANDLER	; xD7
	.FILL INT_NULL_HANDLER	; xD8
	.FILL INT_NULL_HANDLER	; xD9
	.FILL INT_NULL_HANDLER	; xDA
	.FILL INT_NULL_HANDLER	; xDB
	.FILL INT_NULL_HANDLER	; xDC
	.FILL INT_NULL_HANDLER	; xDD
	.FILL INT_NULL_HANDLER	; xDE
	.FILL INT_NULL_HANDLER	; xDF
	.FILL INT_NULL_HANDLER	; xE0
	.FILL INT_NULL_HANDLER	; xE1
	.FILL INT_NULL_HANDLER	; xE2
	.FILL INT_NULL_HANDLER	; xE3
	.FILL INT_NULL_HANDLER	; xE4
	.FILL INT_NULL_HANDLER	; xE5
	.FILL INT_NULL_HANDLER	; xE6
	.FILL INT_NULL_HANDLER	; xE7
	.FILL INT_NULL_HANDLER	; xE8
	.FILL INT_NULL_HANDLER	; xE9
	.FILL INT_NULL_HANDLER	; xEA
	.FILL INT_NULL_HANDLER	; xEB
	.FILL INT_NULL_HANDLER	; xEC
	.FILL INT_NULL_HANDLER	; xED
	.FILL INT_NULL_HANDLER	; xEE
	.FILL INT_NULL_HANDLER	; xEF
	.FILL INT_NULL_HANDLER	; xF0
	.FILL INT_NULL_HANDLER	; xF1
	.FILL INT_NULL_HANDLER	; xF2
	.FILL INT_NULL_HANDLER	; xF3
	.FILL INT_NULL_HANDLER	; xF4
	.FILL INT_NULL_HANDLER	; xF5
	.FILL INT_NULL_HANDLER	; xF6
	.FILL INT_NULL_HANDLER	; xF7
	.FILL INT_NULL_HANDLER	; xF8
	.FILL INT_NULL_HANDLER	; xF9
	.FILL INT_NULL_HANDLER	; xFA
	.FILL INT_NULL_HANDLER	; xFB
	.FILL INT_NULL_HANDLER	; xFC
	.FILL INT_NULL_HANDLER	; xFD
	.FILL INT_NULL_HANDLER	; xFE
	.FILL INT_NULL_HANDLER	; xFF

USER_ENTRY_ADDR
    .BLKW 1         ; space for user program entry address (at x0200), specified by .ORIG pseudo-op
    .BLKW 1         ; one-word pad
    .BLKW 199
KERNEL_STACK        ; OS stack grows down (towards lower addresses), totals 200 words
    .BLKW 1


;;
;; ======================= KERNEL BOOTS HERE =======================
;; Note: interrupts are not enabled for the keyboard by default
;;
KERNEL_ENTRY	           ; reset vector will point here (x02ca)
    LEA R6, KERNEL_STACK   ; setup the OS's stack pointer
    LEA R0, SPLASH_MSG
    PUTS
    LD R0, INIT_PSR
    ADD R6, R6, #-1        
    STR R0, R6, #0         ; push initial user PSR onto kernel stack
    LD R0, USER_ENTRY_ADDR
    ADD R6, R6, #-1
    STR R0, R6, #0         ; push userspace entry (as PC) onto kernel stack
    RTI                    ; jump to userspace


KERNEL_BLACKHOLE
    BRnzp KERNEL_BLACKHOLE

SPLASH_MSG
    .STRINGZ "Welcome to techOS, the iit3503 operating system!\n"

;;
;; MMIO register addresses
;;
KBSR        .FILL xFE00  ; keyboard status register
KBDR        .FILL xFE02  ; keyboard data register
DSR         .FILL xFE04  ; device status register
DDR         .FILL xFE06  ; device data register
MCR         .FILL xFFFE  ; machine control register

;;
;; Userspace state
;;
INIT_PSR .FILL x8002 ; Priv=1, Prio=0, N=0, Z=1, P=0

;;
;; Register save area for handlers
;;
PUTS_R2_SAVE.BLKW 1
OUT_R1_SAVE .BLKW 1
IN_R0_SAVE  .BLKW 1
KBD_R0_SAVE .BLKW 1
KBD_R1_SAVE .BLKW 1

;; 
;; Masks for bit twiddling
;;
KBD_INT_ENABLE.FILL x4000
MASK_HI       .FILL x7FFF
LOW_8_BITS    .FILL x00FF



;;
;; ===================== BEGIN OS HANDLERS =========================
;;
TRAP_PUTS_HANDLER
    ST R2, PUTS_R2_SAVE ; holds char ptr 
    AND R2, R2, #0      ; clear R2
    ADD R2, R0, #0      ; transfer ptr to R2
PUTS_LOOP
    LDR R0, R2, #0      ; R0 <- *ptr
    BRz DONE_PUTS       ; if (*ptr == 0) goto DONE_PUTS
    OUT                 ; putc(*ptr)
    ADD R2, R2, #1      ; ptr++
    BRnzp PUTS_LOOP
DONE_PUTS
    LD R2, PUTS_R2_SAVE
    RTI
    
TRAP_OUT_HANDLER
    ST R1, OUT_R1_SAVE
DISPLAYWAIT
    LDI R1, DSR
    BRzp DISPLAYWAIT
    STI R0, DDR         ; char comes in in R0
    LD R1, OUT_R1_SAVE
    RTI



TRAP_GETC_HANDLER
	LDI R0, KBSR
	BRzp TRAP_GETC_HANDLER 
	LDI R0, KBDR
	RTI


TRAP_IN_HANDLER
	LEA R0, TRAP_IN_MSG	; ask for input from keyboard
	PUTS
	GETC                ; read in a single char
	OUT                 ; echo back to user
	ST R0, IN_R0_SAVE   ; save the char
	AND R0, R0, #0      ; output newline
	ADD R0, R0, #10
	OUT
	LD R0, IN_R0_SAVE   ; restore the char
	RTI

TRAP_IN_MSG          .STRINGZ "\n[student@techOS-shell] "

; TODO
TRAP_PUTSP_HANDLER
	; NOTE: This trap will end when it sees any NUL, even in
	; packed form, despite the P&P second edition's requirement
	; of a double NUL.

	;ST R0,OS_R0		; save R0, R1, R2, R3, and R7
	;ST R1,OS_R1
	;ST R2,OS_R2
	;ST R3,OS_R3
	ADD R1,R0,#0		; move string pointer (R0) into R1

TRAP_PUTSP_LOOP
    LEA R0, BAD_PUTSP
    PUTS
    HALT

BAD_PUTSP .STRINGZ "PUTSP is not currently supported\n"


TRAP_HALT_HANDLER              ; we don't come back from a HALT, so no need to save regs
	LEA R0, TRAP_HALT_MSG
	PUTS
    LD R3, DELAY
DELAY_LOOP
    ADD R3, R3, #-1
    BRp DELAY_LOOP
	LDI R0, MCR	   
	LD R1, MASK_HI
	AND R0, R0, R1             ; clear the "clock enable" bit (bit 15)
	STI R0, MCR                ; this actually stops the clock
STAY_HALTED
	BRnzp STAY_HALTED          ; this instruction shouldn't actually execute...

DELAY .FILL x0FFF
TRAP_HALT_MSG        .STRINGZ "techOS requesting machine halt.\n"


TRAP_NULL_HANDLER
	LEA R0, TRAP_NULL_TRAP_MSG	
	PUTS
    HALT

TRAP_NULL_TRAP_MSG .STRINGZ "\ntechOS encountered an unhandled TRAP.\n"


INT_KBD_HANDLER
    ST R0, KBD_R0_SAVE
    ST R1, KBD_R1_SAVE
    LEA R0, TRAP_FOO
    PUTS
    LD R0, KBD_R0_SAVE
    LD R1, KBD_R1_SAVE
    RTI

TRAP_FOO .STRINGZ "Received keyboard interrupt\n"


EXCP_NULL_HANDLER
    LEA R0, EXCP_NULL_MSG
    PUTS
    HALT

EXCP_NULL_MSG .STRINGZ "\nUnhandled exception.\n"

EXCP_ACV_HANDLER
    LEA R0, EXCP_ACV_MSG
    PUTS
    HALT

EXCP_ACV_MSG    .STRINGZ "\nAccess control violation (attempt to access privileged memory in user mode)\n"

EXCP_PRIV_HANDLER
    LEA R0, EXCP_PRIV_MSG
    PUTS
    HALT

EXCP_PRIV_MSG    .STRINGZ "\nPrivilege mode violation (attempt to RTI in user mode).\n"


EXCP_ILL_HANDLER
    LEA R0, EXCP_ILL_MSG
    PUTS
    HALT

EXCP_ILL_MSG .STRINGZ "\nIllegal opcode exception.\n"


INT_NULL_HANDLER
    LEA R0, INT_NULL_INT_MSG
    PUTS
    HALT

INT_NULL_INT_MSG    .STRINGZ "\nUnhandled interrupt.\n"

	.END

